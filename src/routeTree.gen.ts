/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TailwindColorsImport } from './routes/tailwind/colors'
import { Route as GeneratorsUuidImport } from './routes/generators/uuid'
import { Route as GeneratorsLoremIpsumImport } from './routes/generators/lorem-ipsum'
import { Route as GeneratorsFakeDataImport } from './routes/generators/fake-data'
import { Route as FormattersJsonImport } from './routes/formatters/json'
import { Route as DebuggersJwtImport } from './routes/debuggers/jwt'
import { Route as ConvertersUrlencodeDecodeImport } from './routes/converters/urlencode-decode'
import { Route as ConvertersUnixTimeImport } from './routes/converters/unix-time'
import { Route as ConvertersTextcaseImport } from './routes/converters/textcase'
import { Route as ConvertersNumberBaseImport } from './routes/converters/number-base'
import { Route as ConvertersHashImport } from './routes/converters/hash'
import { Route as ConvertersBase64Import } from './routes/converters/base64'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TailwindColorsRoute = TailwindColorsImport.update({
  id: '/tailwind/colors',
  path: '/tailwind/colors',
  getParentRoute: () => rootRoute,
} as any)

const GeneratorsUuidRoute = GeneratorsUuidImport.update({
  id: '/generators/uuid',
  path: '/generators/uuid',
  getParentRoute: () => rootRoute,
} as any)

const GeneratorsLoremIpsumRoute = GeneratorsLoremIpsumImport.update({
  id: '/generators/lorem-ipsum',
  path: '/generators/lorem-ipsum',
  getParentRoute: () => rootRoute,
} as any)

const GeneratorsFakeDataRoute = GeneratorsFakeDataImport.update({
  id: '/generators/fake-data',
  path: '/generators/fake-data',
  getParentRoute: () => rootRoute,
} as any)

const FormattersJsonRoute = FormattersJsonImport.update({
  id: '/formatters/json',
  path: '/formatters/json',
  getParentRoute: () => rootRoute,
} as any)

const DebuggersJwtRoute = DebuggersJwtImport.update({
  id: '/debuggers/jwt',
  path: '/debuggers/jwt',
  getParentRoute: () => rootRoute,
} as any)

const ConvertersUrlencodeDecodeRoute = ConvertersUrlencodeDecodeImport.update({
  id: '/converters/urlencode-decode',
  path: '/converters/urlencode-decode',
  getParentRoute: () => rootRoute,
} as any)

const ConvertersUnixTimeRoute = ConvertersUnixTimeImport.update({
  id: '/converters/unix-time',
  path: '/converters/unix-time',
  getParentRoute: () => rootRoute,
} as any)

const ConvertersTextcaseRoute = ConvertersTextcaseImport.update({
  id: '/converters/textcase',
  path: '/converters/textcase',
  getParentRoute: () => rootRoute,
} as any)

const ConvertersNumberBaseRoute = ConvertersNumberBaseImport.update({
  id: '/converters/number-base',
  path: '/converters/number-base',
  getParentRoute: () => rootRoute,
} as any)

const ConvertersHashRoute = ConvertersHashImport.update({
  id: '/converters/hash',
  path: '/converters/hash',
  getParentRoute: () => rootRoute,
} as any)

const ConvertersBase64Route = ConvertersBase64Import.update({
  id: '/converters/base64',
  path: '/converters/base64',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/converters/base64': {
      id: '/converters/base64'
      path: '/converters/base64'
      fullPath: '/converters/base64'
      preLoaderRoute: typeof ConvertersBase64Import
      parentRoute: typeof rootRoute
    }
    '/converters/hash': {
      id: '/converters/hash'
      path: '/converters/hash'
      fullPath: '/converters/hash'
      preLoaderRoute: typeof ConvertersHashImport
      parentRoute: typeof rootRoute
    }
    '/converters/number-base': {
      id: '/converters/number-base'
      path: '/converters/number-base'
      fullPath: '/converters/number-base'
      preLoaderRoute: typeof ConvertersNumberBaseImport
      parentRoute: typeof rootRoute
    }
    '/converters/textcase': {
      id: '/converters/textcase'
      path: '/converters/textcase'
      fullPath: '/converters/textcase'
      preLoaderRoute: typeof ConvertersTextcaseImport
      parentRoute: typeof rootRoute
    }
    '/converters/unix-time': {
      id: '/converters/unix-time'
      path: '/converters/unix-time'
      fullPath: '/converters/unix-time'
      preLoaderRoute: typeof ConvertersUnixTimeImport
      parentRoute: typeof rootRoute
    }
    '/converters/urlencode-decode': {
      id: '/converters/urlencode-decode'
      path: '/converters/urlencode-decode'
      fullPath: '/converters/urlencode-decode'
      preLoaderRoute: typeof ConvertersUrlencodeDecodeImport
      parentRoute: typeof rootRoute
    }
    '/debuggers/jwt': {
      id: '/debuggers/jwt'
      path: '/debuggers/jwt'
      fullPath: '/debuggers/jwt'
      preLoaderRoute: typeof DebuggersJwtImport
      parentRoute: typeof rootRoute
    }
    '/formatters/json': {
      id: '/formatters/json'
      path: '/formatters/json'
      fullPath: '/formatters/json'
      preLoaderRoute: typeof FormattersJsonImport
      parentRoute: typeof rootRoute
    }
    '/generators/fake-data': {
      id: '/generators/fake-data'
      path: '/generators/fake-data'
      fullPath: '/generators/fake-data'
      preLoaderRoute: typeof GeneratorsFakeDataImport
      parentRoute: typeof rootRoute
    }
    '/generators/lorem-ipsum': {
      id: '/generators/lorem-ipsum'
      path: '/generators/lorem-ipsum'
      fullPath: '/generators/lorem-ipsum'
      preLoaderRoute: typeof GeneratorsLoremIpsumImport
      parentRoute: typeof rootRoute
    }
    '/generators/uuid': {
      id: '/generators/uuid'
      path: '/generators/uuid'
      fullPath: '/generators/uuid'
      preLoaderRoute: typeof GeneratorsUuidImport
      parentRoute: typeof rootRoute
    }
    '/tailwind/colors': {
      id: '/tailwind/colors'
      path: '/tailwind/colors'
      fullPath: '/tailwind/colors'
      preLoaderRoute: typeof TailwindColorsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/converters/base64': typeof ConvertersBase64Route
  '/converters/hash': typeof ConvertersHashRoute
  '/converters/number-base': typeof ConvertersNumberBaseRoute
  '/converters/textcase': typeof ConvertersTextcaseRoute
  '/converters/unix-time': typeof ConvertersUnixTimeRoute
  '/converters/urlencode-decode': typeof ConvertersUrlencodeDecodeRoute
  '/debuggers/jwt': typeof DebuggersJwtRoute
  '/formatters/json': typeof FormattersJsonRoute
  '/generators/fake-data': typeof GeneratorsFakeDataRoute
  '/generators/lorem-ipsum': typeof GeneratorsLoremIpsumRoute
  '/generators/uuid': typeof GeneratorsUuidRoute
  '/tailwind/colors': typeof TailwindColorsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/converters/base64': typeof ConvertersBase64Route
  '/converters/hash': typeof ConvertersHashRoute
  '/converters/number-base': typeof ConvertersNumberBaseRoute
  '/converters/textcase': typeof ConvertersTextcaseRoute
  '/converters/unix-time': typeof ConvertersUnixTimeRoute
  '/converters/urlencode-decode': typeof ConvertersUrlencodeDecodeRoute
  '/debuggers/jwt': typeof DebuggersJwtRoute
  '/formatters/json': typeof FormattersJsonRoute
  '/generators/fake-data': typeof GeneratorsFakeDataRoute
  '/generators/lorem-ipsum': typeof GeneratorsLoremIpsumRoute
  '/generators/uuid': typeof GeneratorsUuidRoute
  '/tailwind/colors': typeof TailwindColorsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/converters/base64': typeof ConvertersBase64Route
  '/converters/hash': typeof ConvertersHashRoute
  '/converters/number-base': typeof ConvertersNumberBaseRoute
  '/converters/textcase': typeof ConvertersTextcaseRoute
  '/converters/unix-time': typeof ConvertersUnixTimeRoute
  '/converters/urlencode-decode': typeof ConvertersUrlencodeDecodeRoute
  '/debuggers/jwt': typeof DebuggersJwtRoute
  '/formatters/json': typeof FormattersJsonRoute
  '/generators/fake-data': typeof GeneratorsFakeDataRoute
  '/generators/lorem-ipsum': typeof GeneratorsLoremIpsumRoute
  '/generators/uuid': typeof GeneratorsUuidRoute
  '/tailwind/colors': typeof TailwindColorsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/converters/base64'
    | '/converters/hash'
    | '/converters/number-base'
    | '/converters/textcase'
    | '/converters/unix-time'
    | '/converters/urlencode-decode'
    | '/debuggers/jwt'
    | '/formatters/json'
    | '/generators/fake-data'
    | '/generators/lorem-ipsum'
    | '/generators/uuid'
    | '/tailwind/colors'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/converters/base64'
    | '/converters/hash'
    | '/converters/number-base'
    | '/converters/textcase'
    | '/converters/unix-time'
    | '/converters/urlencode-decode'
    | '/debuggers/jwt'
    | '/formatters/json'
    | '/generators/fake-data'
    | '/generators/lorem-ipsum'
    | '/generators/uuid'
    | '/tailwind/colors'
  id:
    | '__root__'
    | '/'
    | '/converters/base64'
    | '/converters/hash'
    | '/converters/number-base'
    | '/converters/textcase'
    | '/converters/unix-time'
    | '/converters/urlencode-decode'
    | '/debuggers/jwt'
    | '/formatters/json'
    | '/generators/fake-data'
    | '/generators/lorem-ipsum'
    | '/generators/uuid'
    | '/tailwind/colors'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConvertersBase64Route: typeof ConvertersBase64Route
  ConvertersHashRoute: typeof ConvertersHashRoute
  ConvertersNumberBaseRoute: typeof ConvertersNumberBaseRoute
  ConvertersTextcaseRoute: typeof ConvertersTextcaseRoute
  ConvertersUnixTimeRoute: typeof ConvertersUnixTimeRoute
  ConvertersUrlencodeDecodeRoute: typeof ConvertersUrlencodeDecodeRoute
  DebuggersJwtRoute: typeof DebuggersJwtRoute
  FormattersJsonRoute: typeof FormattersJsonRoute
  GeneratorsFakeDataRoute: typeof GeneratorsFakeDataRoute
  GeneratorsLoremIpsumRoute: typeof GeneratorsLoremIpsumRoute
  GeneratorsUuidRoute: typeof GeneratorsUuidRoute
  TailwindColorsRoute: typeof TailwindColorsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConvertersBase64Route: ConvertersBase64Route,
  ConvertersHashRoute: ConvertersHashRoute,
  ConvertersNumberBaseRoute: ConvertersNumberBaseRoute,
  ConvertersTextcaseRoute: ConvertersTextcaseRoute,
  ConvertersUnixTimeRoute: ConvertersUnixTimeRoute,
  ConvertersUrlencodeDecodeRoute: ConvertersUrlencodeDecodeRoute,
  DebuggersJwtRoute: DebuggersJwtRoute,
  FormattersJsonRoute: FormattersJsonRoute,
  GeneratorsFakeDataRoute: GeneratorsFakeDataRoute,
  GeneratorsLoremIpsumRoute: GeneratorsLoremIpsumRoute,
  GeneratorsUuidRoute: GeneratorsUuidRoute,
  TailwindColorsRoute: TailwindColorsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/converters/base64",
        "/converters/hash",
        "/converters/number-base",
        "/converters/textcase",
        "/converters/unix-time",
        "/converters/urlencode-decode",
        "/debuggers/jwt",
        "/formatters/json",
        "/generators/fake-data",
        "/generators/lorem-ipsum",
        "/generators/uuid",
        "/tailwind/colors"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/converters/base64": {
      "filePath": "converters/base64.tsx"
    },
    "/converters/hash": {
      "filePath": "converters/hash.tsx"
    },
    "/converters/number-base": {
      "filePath": "converters/number-base.tsx"
    },
    "/converters/textcase": {
      "filePath": "converters/textcase.tsx"
    },
    "/converters/unix-time": {
      "filePath": "converters/unix-time.tsx"
    },
    "/converters/urlencode-decode": {
      "filePath": "converters/urlencode-decode.tsx"
    },
    "/debuggers/jwt": {
      "filePath": "debuggers/jwt.tsx"
    },
    "/formatters/json": {
      "filePath": "formatters/json.tsx"
    },
    "/generators/fake-data": {
      "filePath": "generators/fake-data.tsx"
    },
    "/generators/lorem-ipsum": {
      "filePath": "generators/lorem-ipsum.tsx"
    },
    "/generators/uuid": {
      "filePath": "generators/uuid.tsx"
    },
    "/tailwind/colors": {
      "filePath": "tailwind/colors.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
