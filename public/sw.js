const CACHE_NAME = 'tinydev-tools-cache-v3';
const urlsToCache = [
  // '/', // Root path, should serve the main HTML generated by __root.tsx
  // Other critical, unhashed assets can be listed here if any.
  // Hashed assets (JS/CSS bundles) will be cached by the fetch handler below.
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Opened cache');
        return cache.addAll(urlsToCache);
      })
  );
});

self.addEventListener('fetch', (event) => {
  // We only want to handle GET requests.
  if (event.request.method !== 'GET') {
    // For non-GET requests, just pass them through to the network.
    // Or, if you want to explicitly not handle them and let the browser do its default:
    // return; 
    // For this case, allowing default browser behavior or passing through is fine.
    // If it's not a GET request, we don't want to try and cache it with this logic.
    return;
  }

  event.respondWith(
    caches.match(event.request)
      .then((cachedResponse) => {
        if (cachedResponse) {
          // If found in cache, return it.
          return cachedResponse;
        }

        // Not in cache, fetch from network.
        return fetch(event.request).then((networkResponse) => {
          // If it's a script, don't cache it, just return from network
          if (event.request.destination === 'script') {
            console.log('SW: Bypassing cache for script:', event.request.url);
            return networkResponse;
          }

          // Check if we received a valid response for other assets.
          // It's important to not cache responses that are errors or opaque responses (type 'opaque')
          // for cross-origin requests without CORS, as they offer little value and can consume space.
          // 'basic' type indicates same-origin requests or CORS-enabled cross-origin requests.
          if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {
            return networkResponse;
          }

          // Clone the response. A response is a stream and can only be consumed once.
          // We need one for the browser and one for the cache.
          const responseToCache = networkResponse.clone();

          caches.open(CACHE_NAME)
            .then((cache) => {
              console.log('SW: Caching asset:', event.request.url);
              cache.put(event.request, responseToCache);
            });

          return networkResponse;
        }).catch(error => {
          // This catch handles network errors (e.g., user is offline)
          console.error('Service Worker: Fetching failed for:', event.request.url, error);
          // At this point, the request has failed, and it wasn't in the cache.
          // You might want to return a fallback offline page if you have one.
          // For example: return caches.match('/offline.html');
          // If no specific fallback, re-throwing the error lets the browser handle the failure.
          throw error;
        });
      })
  );
});

self.addEventListener('activate', (event) => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
}); 